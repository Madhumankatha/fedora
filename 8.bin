#include<iostream>
using namespace std;
int parent[9];
int find(int i)
{
while(parent[i])
i=parent[i];
return i;
}
int uni(int i,int j)
{
if(i!=j)
{
parent[j]=i;
return 1;
}
return 0;
}
int main()
{
int a,b,u,v,n,i,j,k,ne=1,min,mincost=0,cost[9][9];
cout<<"\n\t Implementation of kruskal algorithm \n\n";
cout<<"\n enter number of vertices\n:";
cin>>n;
cout<<"\nenter the cost adjacency matrix:\n";
for(i=1;i<=n;i++)
{
for(j=1;j<=n;j++)
{
cin>>cost[i][j];
if(cost[i][j]==0)
cost[i][j]=999;
}
}
cout<<"\n the edges of minium cost spanning tree are :\n\n";
while(ne<n)
{
for(i=1,min=999;i<=n;i++)
{
for(j=1;j<=n;j++)
{
if(cost[i][j]<min)
{
min=cost[i][j];
a=u=i;
b=v=j;
}
}
}
u=find(u);
v=find(v);
if(uni(u,v))
{
cout<<"\n"<<ne++<<"edge("<<a<<" "<<b<<"j="<<min<<"\n";
mincost+=min;
}
cost[a][b]=cost[b][a]=999;
}
cout<<"\n minium cost ="<<mincost<<"\n";
return 0;
}

/*
 4
 *
 0 3 2 1
3 0 999 6 
2 999 0 4
1 6 4 0

 */
