#include<iostream>
using namespace std;
void floyd(int [10][10],int);
int main()
{
  int a[10][10],n,i,j;
  cout<<"\n Enter size of nodes:";
  cin>>n;
  cout<<"\n Enter cost adjacency matrix \n";
  for(i=1;i<=n;i++)
  for(j=1;j<=n;j++)
  cin>>a[i][j];
  floyd(a,n);
  return 0;
}
void floyd(int a[10][10],int n)
{
  int d[10][10],i,j,k;
  for(i=1;i<=n;i++)
  for(j=1;j<=n;j++)
  d[i][j]=a[i][j];
  for(k=1;k<=n;k++)
  {
    for(i=1;i<=n;i++)
    {
      for(j=1;j<=n;j++)
      {
        d[i][j]=min(d[i][j],d[i][k]+d[k][j]);
      }
    }
  }
  cout<<"\n Distance matrix \n";
  for(i=1;i<=n;i++)
  {
    for(j=1;j<=n;j++)
    cout<<" "<<d[i][j];
    cout<<"\n";
  }
}
int min(int a,int b)
{
   return(a<b) ? a:b;
}

/*
 4
 * 
0 1 99 99 
99 0 99 2 
99 99 0 99
3 99 4 0
 * 
 */


#include<iostream>
using namespace std;
int n,a[10][10],p[10][10];
void path()
{
  int i,j,k;
  for(i=0;i<n;i++)
  for(j=0;j<n;j++)
  p[i][j]=a[i][j];
  for(k=0;k<n;k++)
  {
    for(i=0;i<n;i++)
    {
      for(j=0;j<n;j++)
      {
        if(p[i][k]==1&&p[k][j]==1)
        p[i][j]=1;
      }
    }
  }
}
int main()
{
  int i,j;
  cout<<"\n Enter the number of nodes:";
  cin>>n;
  cout<<"\n Enter the adjancency matrix:";
  for(i=0;i<n;i++)
  for(j=0;j<n;j++)
  cin>>a[i][j];
  path();
  cout<<"\n The path matrix is shown below \n";
  for(i=0;i<n;i++)
  {
    for(j=0;j<n;j++)
    cout<<p[i][j];
    cout<<"\n";
  }
}

/*
 4
 * 
 * 0 1 0 0
 * 0 0 0 1
 * 0 0 0 0 
 * 1 0 1 0
 */